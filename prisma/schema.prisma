generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Poll {
  id          Int    @id @default(autoincrement())
  hex         Int    @unique
  description String
}

model Block {
  id      Int    @id @default(1)
  blockNo String @unique @default("")
}

model ManifoldBlock {
  id      Int    @id @default(1)
  blockNo String @unique @default("")
}

model EventLog {
  id               String   @id @unique @default(uuid())
  address          String
  topics           String[]
  data             String
  blockNumber      String
  transactionHash  String
  transactionIndex String
  blockHash        String
  logIndex         String
  removed          Boolean
  blockDate        DateTime @db.Timestamptz(3)
  timestamp        String
  functionName     String?
}

model AirdropUsers {
  id             Int      @id @default(autoincrement())
  address        String
  amount         Int
  tokenId        Int
  provider       String
  blockDate      DateTime @db.Timestamptz(3)
  timestamp      String
  blockNumber    String
  snapshotNumber Int
}

model Artist {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  bio           String
  exhibitions   String?
  samples       String?
  twitter_url   String
  instagram_url String?
  website       String?
  project       String
}

model MetaborgBurnUsers {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  email   String
  address String
  country String
  state   String
  zip     String
  tokenId String

  @@unique([email, tokenId])
  @@index([email, tokenId])
}

model User {
  id         String   @id @unique @default(uuid())
  address    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isGuardian Boolean  @default(false)
  gNfts      String   @default("")

  votes Vote[]
}

model Collection {
  id              String   @id @unique @default(uuid())
  platform        String
  platformAddress String
  tokenId         String
  tokenType       String
  title           String
  balance         String
  description     String
  tokenUriRaw     String
  tokenUriGateway String
  image           String
  createdBy       String
  yearCreated     String
  mimeType        String
  mimeUri         String
  tags            String[]
  timeLastUpdated DateTime @db.Timestamptz(3)
  votes Vote[]
}



model Vote {
  vote String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, collectionId])
  @@index([userId, collectionId, createdAt, updatedAt, vote])
}
